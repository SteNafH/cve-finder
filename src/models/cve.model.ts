import vulnerabilityLevel from "../enums/vulnerabilityLevel.js";
import {randomUUID} from "crypto";

export interface Cve {
    id: string;
    title: string;
    summary: string;
    link: string;
    vulnerability_level: vulnerabilityLevel;
}

export interface DependencyCve {
    id: string;
    dependency_id: string;
    cve_id: string;
}

class CveModel {
    public cves: Cve[] = [];
    public dependencyCves: DependencyCve[] = [];

    public async findAllByDependencyIds(dependencyIds: string[]): Promise<(Cve & DependencyCve)[]> {
        return this.dependencyCves
            .filter(dependencyCve => dependencyIds.includes(dependencyCve.dependency_id))
            .map(dependencyCve => ({...this.cves.find(cve => cve.id === dependencyCve.cve_id)!, ...dependencyCve}));
    }

    public async insert(newDependencyCves: Omit<DependencyCve, 'id'>[], newCves: Cve[]): Promise<void> {
        this.dependencyCves.push(...newDependencyCves.map(newDependencyCve => ({
            id: randomUUID(),
            ...newDependencyCve,
        })));

        for (const newCve of newCves) {
            const index = this.cves.findIndex(cve => cve.id === newCve.id);

            if (index === -1)
                this.cves.push(newCve);
            else
                this.cves[index] = newCve;
        }
    }

    public async deleteByIds(ids: string[]): Promise<void> {
        for (const id of ids) {
            const index = this.dependencyCves.findIndex(dependencyCve => dependencyCve.id === id);
            this.dependencyCves.splice(index, 1);
        }

        for (const cve of this.cves) {
            const index = this.dependencyCves.findIndex(dependencyCve => dependencyCve.cve_id === cve.id);
            if (index === -1)
                this.cves.splice(index, 1);
        }
    }
}

export default new CveModel();
