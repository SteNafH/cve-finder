import UpdateConfig from "../../configs/config.js";

interface Identifier {
    type: string;
    value: string;
}

interface GithubResponse {
    data: {
        securityAdvisory: {
            permaLink: string;
            summary: string;
            identifiers: Identifier[];
        }
    }
}

class GithubService {
    private graphQl = `
    query ($ghsaId: String!) {
      securityAdvisory(ghsaId: $ghsaId) {
        permalink
        summary
        identifiers {
            type
            value
        }
      }
    }
    `;

    public async getName(url: string): Promise<string> {
        const ghsa = this.getGHSA(url);
        const response = await fetch(`https://api.github.com/graphql`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Authorization': `Bearer ${UpdateConfig.GITHUB_TOKEN}`,
            },
            body: JSON.stringify({query: this.graphQl, variables: {ghsaId: ghsa}}),
        });

        if (response.status === 200) {
            const body: GithubResponse = await response.json();
            return body.data.securityAdvisory.identifiers.find(identifier => identifier.type === 'CVE')?.value ?? ghsa;
        }

        throw Error('Failed to retrieve Advisory');
    }

    private getGHSA(url: string): string {
        const regex = /GHSA-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}/i;
        const match = regex.exec(url);

        if (!match)
            throw new Error('GHSA not found');

        return match[0];
    }
}

export default new GithubService();
