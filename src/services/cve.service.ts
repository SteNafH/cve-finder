import vulnerabilityLevel from "../enums/vulnerabilityLevel.js";
import {Cve, DependencyCve} from "../models/cve.model";

class CveService {
    public getLookups(cves: (Cve & DependencyCve)[]): [Map<string, (Cve & DependencyCve)[]>, Map<string, Cve & DependencyCve>] {
        const dependencyCveLookup: Map<string, (Cve & DependencyCve)[]> = new Map();
        const cveLookup: Map<string, Cve & DependencyCve> = new Map();

        for (const cve of cves) {
            cveLookup.set(cve.title, cve);
            const dependencyCve = dependencyCveLookup.get(cve.dependency_id);
            if (dependencyCve)
                dependencyCve.push(cve);
            else
                dependencyCveLookup.set(cve.dependency_id, [cve]);
        }

        return [dependencyCveLookup, cveLookup];
    }

    private readonly order = [vulnerabilityLevel.NONE, vulnerabilityLevel.LOW, vulnerabilityLevel.MEDIUM, vulnerabilityLevel.HIGH]
    public getHighestVulnerabilityLevel(level1: vulnerabilityLevel, level2: vulnerabilityLevel): vulnerabilityLevel {
        if (level2 && this.order.indexOf(level2) > this.order.indexOf(level1))
            return level2;

        return level1;
    }
}

export default new CveService();
