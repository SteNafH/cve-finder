import vulnerabilityLevel from "../../enums/vulnerabilityLevel.js";

export enum Severity {
    NONE = 'none',
    LOW = 'low',
    MEDIUM = 'medium',
    HIGH = 'high',
    CRITICAL = 'critical',
}

export interface Advisory {
    advisoryId: string;
    packageName: string;
    remoteId: string;
    title: string;
    link: string;
    cve: string | null;
    affectedVersions: string;
    source: string;
    reportedAt: string;
    composerRepository: string;
    severity: Severity | null;
    sources: { name: string; remoteId: string; }[];
}

class PackagistService {
    public async getAdvisories(dependencies: string[]): Promise<Record<string, Advisory[]>> {
        if (!dependencies.length)
            return {};

        const response = await fetch(`https://packagist.org/api/security-advisories?${dependencies.map(dependency => `packages[]=${dependency}`).join('&')}`);

        if (response.status === 200) {
            const advisories = await response.json();
            return advisories.advisories;
        }

        throw new Error('Packagist error');
    }

    public getVulnerabilityLevel(severity: Severity | null): vulnerabilityLevel {
        switch (severity) {
            case Severity.LOW:
                return vulnerabilityLevel.LOW;
            case Severity.MEDIUM:
                return vulnerabilityLevel.MEDIUM;
            case Severity.HIGH:
            case Severity.CRITICAL:
                return vulnerabilityLevel.HIGH;
            default:
                return vulnerabilityLevel.NONE;
        }
    }
}

export default new PackagistService();
