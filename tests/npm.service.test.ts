import {beforeEach, describe, expect, test, vi} from "vitest";
import DependencyModel, {Dependency} from "../src/models/dependency.model";
import dependencyType from "../src/enums/dependencyType";
import vulnerabilityLevel from "../src/enums/vulnerabilityLevel";
import NpmService from "../src/services/npm/npm.service";
import CveModel, {Cve, DependencyCve} from "../src/models/cve.model";
import NpmRegistryService from "../src/services/npm/npm-registry.service";

vi.mock('../src/models/dependency.model');
vi.mock('../src/models/cve.model');

describe('NPM Cves Test', () => {
    beforeEach(() => {
        vi.clearAllMocks();
    });

    test('Should update dependency vulnerability level and add CVE', async () => {
        const dependencies: Dependency[] = [
            {
                id: '0',
                name: 'serve-static',
                version: '1.1.0',
                type: dependencyType.NPM,
                vulnerability_level: vulnerabilityLevel.NONE,
            }
        ];

        vi.mocked(DependencyModel.findAllByType).mockResolvedValue(dependencies);
        vi.mocked(CveModel.findAllByDependencyIds).mockResolvedValue([]);

        await NpmService.update();

        expect(DependencyModel.findAllByType).toBeCalledWith(dependencyType.NPM);
        expect(CveModel.findAllByDependencyIds).toBeCalledWith(['0']);
        expect(DependencyModel.update).toHaveBeenCalledWith([
            {
                id: '0',
                name: 'serve-static',
                version: '1.1.0',
                type: dependencyType.NPM,
                vulnerability_level: vulnerabilityLevel.LOW,
            }
        ]);
        expect(CveModel.insert).toHaveBeenCalledOnce();
        expect(CveModel.deleteByIds).not.toHaveBeenCalled();
    });

    test('Should update CVE', async () => {
        const dependencies: Dependency[] = [
            {
                id: '0',
                name: 'serve-static',
                version: '1.1.0',
                type: dependencyType.NPM,
                vulnerability_level: vulnerabilityLevel.NONE,
            }
        ];

        const cves: (DependencyCve & Cve)[] = [
            {
                id: '0',
                cve_id: '0',
                dependency_id: '0',
                title: 'CVE-123-123',
                summary: 'Should be deleted',
                link: 'test',
                vulnerability_level: vulnerabilityLevel.NONE,
            }
        ];

        vi.mocked(DependencyModel.findAllByType).mockResolvedValue(dependencies);
        vi.mocked(CveModel.findAllByDependencyIds).mockResolvedValue(cves);

        await NpmService.update();

        expect(DependencyModel.findAllByType).toBeCalledWith(dependencyType.NPM);
        expect(CveModel.findAllByDependencyIds).toBeCalledWith(['0']);
        expect(DependencyModel.update).toHaveBeenCalledWith([
            {
                id: '0',
                name: 'serve-static',
                version: '1.1.0',
                type: dependencyType.NPM,
                vulnerability_level: vulnerabilityLevel.LOW,
            }
        ]);
        expect(CveModel.insert).toHaveBeenCalledOnce();
        expect(CveModel.deleteByIds).toBeCalledWith(['0']);
    });

    test('Should not remove CVE if Npm registry returns error', async () => {
        const dependencies: Dependency[] = [
            {
                id: '0',
                name: 'serve-static',
                version: '1.1.0',
                type: dependencyType.NPM,
                vulnerability_level: vulnerabilityLevel.NONE,
            }
        ];

        const cves: (DependencyCve & Cve)[] = [
            {
                id: 'd2b154de-ea8f-4e64-840c-0d146404c4ed',
                dependency_id: '0',
                cve_id: 'f6bd4f14-8f52-4ff8-affd-f7324d009e51',
                title: 'CVE-2023-49316',
                summary: 'phpseclib vulnerable to denial of service',
                link: 'https://github.com/advisories/GHSA-jpr7-q523-hx25',
                vulnerability_level: vulnerabilityLevel.MEDIUM
            }
        ];

        vi.mocked(DependencyModel.findAllByType).mockResolvedValue(dependencies);
        vi.mocked(CveModel.findAllByDependencyIds).mockResolvedValue(cves);
        vi.spyOn(NpmRegistryService, 'getAdvisories').mockRejectedValue(new Error('Npm registry error'));

        await NpmService.update();

        expect(DependencyModel.findAllByType).toBeCalledWith(dependencyType.NPM);
        expect(CveModel.findAllByDependencyIds).toBeCalledWith(['0']);
        expect(DependencyModel.update).not.toHaveBeenCalled();
        expect(CveModel.insert).not.toHaveBeenCalled();
        expect(CveModel.deleteByIds).not.toHaveBeenCalled();
    });
});
